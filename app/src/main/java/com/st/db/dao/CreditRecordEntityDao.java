package com.st.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.st.db.entity.CreditRecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CREDIT_RECORD_ENTITY".
*/
public class CreditRecordEntityDao extends AbstractDao<CreditRecordEntity, String> {

    public static final String TABLENAME = "CREDIT_RECORD_ENTITY";

    /**
     * Properties of entity CreditRecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Xh = new Property(0, String.class, "xh", true, "XH");
        public final static Property DeptId = new Property(1, String.class, "deptId", false, "DEPT_ID");
        public final static Property DeptName = new Property(2, String.class, "deptName", false, "DEPT_NAME");
        public final static Property ManId = new Property(3, String.class, "manId", false, "MAN_ID");
        public final static Property ManName = new Property(4, String.class, "manName", false, "MAN_NAME");
        public final static Property ManType = new Property(5, String.class, "manType", false, "MAN_TYPE");
        public final static Property Credit = new Property(6, String.class, "credit", false, "CREDIT");
        public final static Property Hours = new Property(7, String.class, "hours", false, "HOURS");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property ProId = new Property(9, String.class, "proId", false, "PRO_ID");
        public final static Property ProName = new Property(10, String.class, "proName", false, "PRO_NAME");
        public final static Property ActId = new Property(11, String.class, "actId", false, "ACT_ID");
        public final static Property ActName = new Property(12, String.class, "actName", false, "ACT_NAME");
        public final static Property IsCheck = new Property(13, String.class, "isCheck", false, "IS_CHECK");
        public final static Property CheckSay = new Property(14, String.class, "checkSay", false, "CHECK_SAY");
        public final static Property VerifyUnit = new Property(15, String.class, "verifyUnit", false, "VERIFY_UNIT");
        public final static Property VerifyUnitName = new Property(16, String.class, "verifyUnitName", false, "VERIFY_UNIT_NAME");
        public final static Property VerifyTime = new Property(17, String.class, "verifyTime", false, "VERIFY_TIME");
        public final static Property VerifyState = new Property(18, String.class, "verifyState", false, "VERIFY_STATE");
        public final static Property VerifySay = new Property(19, String.class, "verifySay", false, "VERIFY_SAY");
        public final static Property DeclareState = new Property(20, String.class, "declareState", false, "DECLARE_STATE");
        public final static Property DeclareTime = new Property(21, String.class, "declareTime", false, "DECLARE_TIME");
        public final static Property ModuleSource = new Property(22, String.class, "moduleSource", false, "MODULE_SOURCE");
        public final static Property FunctionSource = new Property(23, String.class, "functionSource", false, "FUNCTION_SOURCE");
        public final static Property Printtime = new Property(24, String.class, "printtime", false, "PRINTTIME");
        public final static Property IsCertificatePrint = new Property(25, String.class, "isCertificatePrint", false, "IS_CERTIFICATE_PRINT");
        public final static Property State = new Property(26, String.class, "state", false, "STATE");
        public final static Property AddTime = new Property(27, String.class, "addTime", false, "ADD_TIME");
        public final static Property AddYear = new Property(28, String.class, "addYear", false, "ADD_YEAR");
        public final static Property Remark1 = new Property(29, String.class, "remark1", false, "REMARK1");
        public final static Property Remark2 = new Property(30, String.class, "remark2", false, "REMARK2");
        public final static Property Remark3 = new Property(31, String.class, "remark3", false, "REMARK3");
        public final static Property Gxsj = new Property(32, String.class, "gxsj", false, "GXSJ");
    }


    public CreditRecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CreditRecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CREDIT_RECORD_ENTITY\" (" + //
                "\"XH\" TEXT PRIMARY KEY NOT NULL ," + // 0: xh
                "\"DEPT_ID\" TEXT," + // 1: deptId
                "\"DEPT_NAME\" TEXT," + // 2: deptName
                "\"MAN_ID\" TEXT," + // 3: manId
                "\"MAN_NAME\" TEXT," + // 4: manName
                "\"MAN_TYPE\" TEXT," + // 5: manType
                "\"CREDIT\" TEXT," + // 6: credit
                "\"HOURS\" TEXT," + // 7: hours
                "\"TYPE\" TEXT," + // 8: type
                "\"PRO_ID\" TEXT," + // 9: proId
                "\"PRO_NAME\" TEXT," + // 10: proName
                "\"ACT_ID\" TEXT," + // 11: actId
                "\"ACT_NAME\" TEXT," + // 12: actName
                "\"IS_CHECK\" TEXT," + // 13: isCheck
                "\"CHECK_SAY\" TEXT," + // 14: checkSay
                "\"VERIFY_UNIT\" TEXT," + // 15: verifyUnit
                "\"VERIFY_UNIT_NAME\" TEXT," + // 16: verifyUnitName
                "\"VERIFY_TIME\" TEXT," + // 17: verifyTime
                "\"VERIFY_STATE\" TEXT," + // 18: verifyState
                "\"VERIFY_SAY\" TEXT," + // 19: verifySay
                "\"DECLARE_STATE\" TEXT," + // 20: declareState
                "\"DECLARE_TIME\" TEXT," + // 21: declareTime
                "\"MODULE_SOURCE\" TEXT," + // 22: moduleSource
                "\"FUNCTION_SOURCE\" TEXT," + // 23: functionSource
                "\"PRINTTIME\" TEXT," + // 24: printtime
                "\"IS_CERTIFICATE_PRINT\" TEXT," + // 25: isCertificatePrint
                "\"STATE\" TEXT," + // 26: state
                "\"ADD_TIME\" TEXT," + // 27: addTime
                "\"ADD_YEAR\" TEXT," + // 28: addYear
                "\"REMARK1\" TEXT," + // 29: remark1
                "\"REMARK2\" TEXT," + // 30: remark2
                "\"REMARK3\" TEXT," + // 31: remark3
                "\"GXSJ\" TEXT);"); // 32: gxsj
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CREDIT_RECORD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CreditRecordEntity entity) {
        stmt.clearBindings();
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(1, xh);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(2, deptId);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(3, deptName);
        }
 
        String manId = entity.getManId();
        if (manId != null) {
            stmt.bindString(4, manId);
        }
 
        String manName = entity.getManName();
        if (manName != null) {
            stmt.bindString(5, manName);
        }
 
        String manType = entity.getManType();
        if (manType != null) {
            stmt.bindString(6, manType);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(7, credit);
        }
 
        String hours = entity.getHours();
        if (hours != null) {
            stmt.bindString(8, hours);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String proId = entity.getProId();
        if (proId != null) {
            stmt.bindString(10, proId);
        }
 
        String proName = entity.getProName();
        if (proName != null) {
            stmt.bindString(11, proName);
        }
 
        String actId = entity.getActId();
        if (actId != null) {
            stmt.bindString(12, actId);
        }
 
        String actName = entity.getActName();
        if (actName != null) {
            stmt.bindString(13, actName);
        }
 
        String isCheck = entity.getIsCheck();
        if (isCheck != null) {
            stmt.bindString(14, isCheck);
        }
 
        String checkSay = entity.getCheckSay();
        if (checkSay != null) {
            stmt.bindString(15, checkSay);
        }
 
        String verifyUnit = entity.getVerifyUnit();
        if (verifyUnit != null) {
            stmt.bindString(16, verifyUnit);
        }
 
        String verifyUnitName = entity.getVerifyUnitName();
        if (verifyUnitName != null) {
            stmt.bindString(17, verifyUnitName);
        }
 
        String verifyTime = entity.getVerifyTime();
        if (verifyTime != null) {
            stmt.bindString(18, verifyTime);
        }
 
        String verifyState = entity.getVerifyState();
        if (verifyState != null) {
            stmt.bindString(19, verifyState);
        }
 
        String verifySay = entity.getVerifySay();
        if (verifySay != null) {
            stmt.bindString(20, verifySay);
        }
 
        String declareState = entity.getDeclareState();
        if (declareState != null) {
            stmt.bindString(21, declareState);
        }
 
        String declareTime = entity.getDeclareTime();
        if (declareTime != null) {
            stmt.bindString(22, declareTime);
        }
 
        String moduleSource = entity.getModuleSource();
        if (moduleSource != null) {
            stmt.bindString(23, moduleSource);
        }
 
        String functionSource = entity.getFunctionSource();
        if (functionSource != null) {
            stmt.bindString(24, functionSource);
        }
 
        String printtime = entity.getPrinttime();
        if (printtime != null) {
            stmt.bindString(25, printtime);
        }
 
        String isCertificatePrint = entity.getIsCertificatePrint();
        if (isCertificatePrint != null) {
            stmt.bindString(26, isCertificatePrint);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(27, state);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(28, addTime);
        }
 
        String addYear = entity.getAddYear();
        if (addYear != null) {
            stmt.bindString(29, addYear);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(30, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(31, remark2);
        }
 
        String remark3 = entity.getRemark3();
        if (remark3 != null) {
            stmt.bindString(32, remark3);
        }
 
        String gxsj = entity.getGxsj();
        if (gxsj != null) {
            stmt.bindString(33, gxsj);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CreditRecordEntity entity) {
        stmt.clearBindings();
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(1, xh);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(2, deptId);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(3, deptName);
        }
 
        String manId = entity.getManId();
        if (manId != null) {
            stmt.bindString(4, manId);
        }
 
        String manName = entity.getManName();
        if (manName != null) {
            stmt.bindString(5, manName);
        }
 
        String manType = entity.getManType();
        if (manType != null) {
            stmt.bindString(6, manType);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(7, credit);
        }
 
        String hours = entity.getHours();
        if (hours != null) {
            stmt.bindString(8, hours);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String proId = entity.getProId();
        if (proId != null) {
            stmt.bindString(10, proId);
        }
 
        String proName = entity.getProName();
        if (proName != null) {
            stmt.bindString(11, proName);
        }
 
        String actId = entity.getActId();
        if (actId != null) {
            stmt.bindString(12, actId);
        }
 
        String actName = entity.getActName();
        if (actName != null) {
            stmt.bindString(13, actName);
        }
 
        String isCheck = entity.getIsCheck();
        if (isCheck != null) {
            stmt.bindString(14, isCheck);
        }
 
        String checkSay = entity.getCheckSay();
        if (checkSay != null) {
            stmt.bindString(15, checkSay);
        }
 
        String verifyUnit = entity.getVerifyUnit();
        if (verifyUnit != null) {
            stmt.bindString(16, verifyUnit);
        }
 
        String verifyUnitName = entity.getVerifyUnitName();
        if (verifyUnitName != null) {
            stmt.bindString(17, verifyUnitName);
        }
 
        String verifyTime = entity.getVerifyTime();
        if (verifyTime != null) {
            stmt.bindString(18, verifyTime);
        }
 
        String verifyState = entity.getVerifyState();
        if (verifyState != null) {
            stmt.bindString(19, verifyState);
        }
 
        String verifySay = entity.getVerifySay();
        if (verifySay != null) {
            stmt.bindString(20, verifySay);
        }
 
        String declareState = entity.getDeclareState();
        if (declareState != null) {
            stmt.bindString(21, declareState);
        }
 
        String declareTime = entity.getDeclareTime();
        if (declareTime != null) {
            stmt.bindString(22, declareTime);
        }
 
        String moduleSource = entity.getModuleSource();
        if (moduleSource != null) {
            stmt.bindString(23, moduleSource);
        }
 
        String functionSource = entity.getFunctionSource();
        if (functionSource != null) {
            stmt.bindString(24, functionSource);
        }
 
        String printtime = entity.getPrinttime();
        if (printtime != null) {
            stmt.bindString(25, printtime);
        }
 
        String isCertificatePrint = entity.getIsCertificatePrint();
        if (isCertificatePrint != null) {
            stmt.bindString(26, isCertificatePrint);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(27, state);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(28, addTime);
        }
 
        String addYear = entity.getAddYear();
        if (addYear != null) {
            stmt.bindString(29, addYear);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(30, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(31, remark2);
        }
 
        String remark3 = entity.getRemark3();
        if (remark3 != null) {
            stmt.bindString(32, remark3);
        }
 
        String gxsj = entity.getGxsj();
        if (gxsj != null) {
            stmt.bindString(33, gxsj);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CreditRecordEntity readEntity(Cursor cursor, int offset) {
        CreditRecordEntity entity = new CreditRecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // xh
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deptId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deptName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // manId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // manName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // manType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // credit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hours
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // proId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // proName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // actId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // actName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isCheck
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // checkSay
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // verifyUnit
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // verifyUnitName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // verifyTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // verifyState
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // verifySay
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // declareState
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // declareTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // moduleSource
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // functionSource
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // printtime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // isCertificatePrint
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // state
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // addTime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // addYear
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // remark1
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // remark2
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // remark3
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // gxsj
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CreditRecordEntity entity, int offset) {
        entity.setXh(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeptId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeptName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setManId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setManName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setManType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCredit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHours(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setActId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setActName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsCheck(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCheckSay(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVerifyUnit(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVerifyUnitName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVerifyTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVerifyState(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVerifySay(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDeclareState(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDeclareTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setModuleSource(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFunctionSource(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPrinttime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIsCertificatePrint(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setState(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setAddTime(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setAddYear(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRemark1(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRemark2(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRemark3(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setGxsj(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CreditRecordEntity entity, long rowId) {
        return entity.getXh();
    }
    
    @Override
    public String getKey(CreditRecordEntity entity) {
        if(entity != null) {
            return entity.getXh();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CreditRecordEntity entity) {
        return entity.getXh() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
