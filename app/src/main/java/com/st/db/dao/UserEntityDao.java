package com.st.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.st.db.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Yhdh = new Property(1, String.class, "yhdh", false, "YHDH");
        public final static Property Mm = new Property(2, String.class, "mm", false, "MM");
        public final static Property Ip = new Property(3, String.class, "ip", false, "IP");
        public final static Property Mac = new Property(4, String.class, "mac", false, "MAC");
        public final static Property Result = new Property(5, String.class, "result", false, "RESULT");
        public final static Property Xm = new Property(6, String.class, "xm", false, "XM");
        public final static Property Yzm = new Property(7, String.class, "yzm", false, "YZM");
        public final static Property Dlms = new Property(8, String.class, "dlms", false, "DLMS");
        public final static Property Glbm = new Property(9, String.class, "glbm", false, "GLBM");
        public final static Property Yhjb = new Property(10, String.class, "yhjb", false, "YHJB");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"YHDH\" TEXT," + // 1: yhdh
                "\"MM\" TEXT," + // 2: mm
                "\"IP\" TEXT," + // 3: ip
                "\"MAC\" TEXT," + // 4: mac
                "\"RESULT\" TEXT," + // 5: result
                "\"XM\" TEXT," + // 6: xm
                "\"YZM\" TEXT," + // 7: yzm
                "\"DLMS\" TEXT," + // 8: dlms
                "\"GLBM\" TEXT," + // 9: glbm
                "\"YHJB\" TEXT);"); // 10: yhjb
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String yhdh = entity.getYhdh();
        if (yhdh != null) {
            stmt.bindString(2, yhdh);
        }
 
        String mm = entity.getMm();
        if (mm != null) {
            stmt.bindString(3, mm);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(4, ip);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(5, mac);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(6, result);
        }
 
        String xm = entity.getXm();
        if (xm != null) {
            stmt.bindString(7, xm);
        }
 
        String yzm = entity.getYzm();
        if (yzm != null) {
            stmt.bindString(8, yzm);
        }
 
        String dlms = entity.getDlms();
        if (dlms != null) {
            stmt.bindString(9, dlms);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(10, glbm);
        }
 
        String yhjb = entity.getYhjb();
        if (yhjb != null) {
            stmt.bindString(11, yhjb);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String yhdh = entity.getYhdh();
        if (yhdh != null) {
            stmt.bindString(2, yhdh);
        }
 
        String mm = entity.getMm();
        if (mm != null) {
            stmt.bindString(3, mm);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(4, ip);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(5, mac);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(6, result);
        }
 
        String xm = entity.getXm();
        if (xm != null) {
            stmt.bindString(7, xm);
        }
 
        String yzm = entity.getYzm();
        if (yzm != null) {
            stmt.bindString(8, yzm);
        }
 
        String dlms = entity.getDlms();
        if (dlms != null) {
            stmt.bindString(9, dlms);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(10, glbm);
        }
 
        String yhjb = entity.getYhjb();
        if (yhjb != null) {
            stmt.bindString(11, yhjb);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // yhdh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mm
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ip
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mac
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // result
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // xm
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // yzm
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dlms
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // glbm
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // yhjb
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYhdh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMac(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResult(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setXm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYzm(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDlms(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGlbm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYhjb(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
