package com.st.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.st.db.entity.StudyRegistrationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDY_REGISTRATION_ENTITY".
*/
public class StudyRegistrationEntityDao extends AbstractDao<StudyRegistrationEntity, String> {

    public static final String TABLENAME = "STUDY_REGISTRATION_ENTITY";

    /**
     * Properties of entity StudyRegistrationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Xh = new Property(0, String.class, "xh", true, "XH");
        public final static Property CourseId = new Property(1, String.class, "courseId", false, "COURSE_ID");
        public final static Property EmpNumber = new Property(2, String.class, "empNumber", false, "EMP_NUMBER");
        public final static Property DeptId = new Property(3, String.class, "deptId", false, "DEPT_ID");
        public final static Property DeptName = new Property(4, String.class, "deptName", false, "DEPT_NAME");
        public final static Property CourseName = new Property(5, String.class, "courseName", false, "COURSE_NAME");
        public final static Property PlaceName = new Property(6, String.class, "placeName", false, "PLACE_NAME");
        public final static Property Position = new Property(7, String.class, "position", false, "POSITION");
        public final static Property DakaTime = new Property(8, String.class, "dakaTime", false, "DAKA_TIME");
        public final static Property AddYear = new Property(9, String.class, "addYear", false, "ADD_YEAR");
        public final static Property Isvalid = new Property(10, String.class, "isvalid", false, "ISVALID");
        public final static Property Isgrant = new Property(11, String.class, "isgrant", false, "ISGRANT");
        public final static Property Awardstate = new Property(12, String.class, "awardstate", false, "AWARDSTATE");
        public final static Property State = new Property(13, String.class, "state", false, "STATE");
        public final static Property AddTime = new Property(14, String.class, "addTime", false, "ADD_TIME");
        public final static Property Remarks1 = new Property(15, String.class, "remarks1", false, "REMARKS1");
        public final static Property Remarks2 = new Property(16, String.class, "remarks2", false, "REMARKS2");
        public final static Property Remarks3 = new Property(17, String.class, "remarks3", false, "REMARKS3");
        public final static Property Gxsj = new Property(18, String.class, "gxsj", false, "GXSJ");
        public final static Property Mark = new Property(19, String.class, "mark", false, "MARK");
    }


    public StudyRegistrationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StudyRegistrationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDY_REGISTRATION_ENTITY\" (" + //
                "\"XH\" TEXT PRIMARY KEY NOT NULL ," + // 0: xh
                "\"COURSE_ID\" TEXT," + // 1: courseId
                "\"EMP_NUMBER\" TEXT," + // 2: empNumber
                "\"DEPT_ID\" TEXT," + // 3: deptId
                "\"DEPT_NAME\" TEXT," + // 4: deptName
                "\"COURSE_NAME\" TEXT," + // 5: courseName
                "\"PLACE_NAME\" TEXT," + // 6: placeName
                "\"POSITION\" TEXT," + // 7: position
                "\"DAKA_TIME\" TEXT," + // 8: dakaTime
                "\"ADD_YEAR\" TEXT," + // 9: addYear
                "\"ISVALID\" TEXT," + // 10: isvalid
                "\"ISGRANT\" TEXT," + // 11: isgrant
                "\"AWARDSTATE\" TEXT," + // 12: awardstate
                "\"STATE\" TEXT," + // 13: state
                "\"ADD_TIME\" TEXT," + // 14: addTime
                "\"REMARKS1\" TEXT," + // 15: remarks1
                "\"REMARKS2\" TEXT," + // 16: remarks2
                "\"REMARKS3\" TEXT," + // 17: remarks3
                "\"GXSJ\" TEXT," + // 18: gxsj
                "\"MARK\" TEXT);"); // 19: mark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDY_REGISTRATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudyRegistrationEntity entity) {
        stmt.clearBindings();
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(1, xh);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(2, courseId);
        }
 
        String empNumber = entity.getEmpNumber();
        if (empNumber != null) {
            stmt.bindString(3, empNumber);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(4, deptId);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(5, deptName);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(6, courseName);
        }
 
        String placeName = entity.getPlaceName();
        if (placeName != null) {
            stmt.bindString(7, placeName);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(8, position);
        }
 
        String dakaTime = entity.getDakaTime();
        if (dakaTime != null) {
            stmt.bindString(9, dakaTime);
        }
 
        String addYear = entity.getAddYear();
        if (addYear != null) {
            stmt.bindString(10, addYear);
        }
 
        String isvalid = entity.getIsvalid();
        if (isvalid != null) {
            stmt.bindString(11, isvalid);
        }
 
        String isgrant = entity.getIsgrant();
        if (isgrant != null) {
            stmt.bindString(12, isgrant);
        }
 
        String awardstate = entity.getAwardstate();
        if (awardstate != null) {
            stmt.bindString(13, awardstate);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(14, state);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(15, addTime);
        }
 
        String remarks1 = entity.getRemarks1();
        if (remarks1 != null) {
            stmt.bindString(16, remarks1);
        }
 
        String remarks2 = entity.getRemarks2();
        if (remarks2 != null) {
            stmt.bindString(17, remarks2);
        }
 
        String remarks3 = entity.getRemarks3();
        if (remarks3 != null) {
            stmt.bindString(18, remarks3);
        }
 
        String gxsj = entity.getGxsj();
        if (gxsj != null) {
            stmt.bindString(19, gxsj);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(20, mark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudyRegistrationEntity entity) {
        stmt.clearBindings();
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(1, xh);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(2, courseId);
        }
 
        String empNumber = entity.getEmpNumber();
        if (empNumber != null) {
            stmt.bindString(3, empNumber);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(4, deptId);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(5, deptName);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(6, courseName);
        }
 
        String placeName = entity.getPlaceName();
        if (placeName != null) {
            stmt.bindString(7, placeName);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(8, position);
        }
 
        String dakaTime = entity.getDakaTime();
        if (dakaTime != null) {
            stmt.bindString(9, dakaTime);
        }
 
        String addYear = entity.getAddYear();
        if (addYear != null) {
            stmt.bindString(10, addYear);
        }
 
        String isvalid = entity.getIsvalid();
        if (isvalid != null) {
            stmt.bindString(11, isvalid);
        }
 
        String isgrant = entity.getIsgrant();
        if (isgrant != null) {
            stmt.bindString(12, isgrant);
        }
 
        String awardstate = entity.getAwardstate();
        if (awardstate != null) {
            stmt.bindString(13, awardstate);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(14, state);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(15, addTime);
        }
 
        String remarks1 = entity.getRemarks1();
        if (remarks1 != null) {
            stmt.bindString(16, remarks1);
        }
 
        String remarks2 = entity.getRemarks2();
        if (remarks2 != null) {
            stmt.bindString(17, remarks2);
        }
 
        String remarks3 = entity.getRemarks3();
        if (remarks3 != null) {
            stmt.bindString(18, remarks3);
        }
 
        String gxsj = entity.getGxsj();
        if (gxsj != null) {
            stmt.bindString(19, gxsj);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(20, mark);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public StudyRegistrationEntity readEntity(Cursor cursor, int offset) {
        StudyRegistrationEntity entity = new StudyRegistrationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // xh
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // empNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deptId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deptName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // courseName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // placeName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // position
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dakaTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // addYear
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isvalid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // isgrant
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // awardstate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // state
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // addTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // remarks1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // remarks2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // remarks3
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // gxsj
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // mark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudyRegistrationEntity entity, int offset) {
        entity.setXh(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCourseId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmpNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeptId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeptName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCourseName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlaceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPosition(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDakaTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddYear(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsvalid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsgrant(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAwardstate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setState(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAddTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemarks1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRemarks2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRemarks3(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setGxsj(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMark(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StudyRegistrationEntity entity, long rowId) {
        return entity.getXh();
    }
    
    @Override
    public String getKey(StudyRegistrationEntity entity) {
        if(entity != null) {
            return entity.getXh();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudyRegistrationEntity entity) {
        return entity.getXh() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
