
package com.st.nfc.activity;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Typeface;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.UnderlineSpan;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import android.widget.TextView.BufferType;
import android.widget.Toast;

import com.framework.util.DateUtils;
import com.st.CMEApplication;
import com.st.R;
import com.st.db.DBUtils;
import com.st.db.dao.StudyRegistrationEntityDao;
import com.st.db.entity.CourseEntity;
import com.st.db.entity.EmployeeEntity;
import com.st.db.entity.StudyRegistrationEntity;
import com.st.db.up.UpUtils;
import com.st.nfc.BasicActivity;
import com.st.nfc.inter.IActivityThatReactsToSave;
import com.st.persenter.MainPresenter;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;

import static com.st.nfc.activity.PreferencesActivity.Preference.UseInternalStorage;


/**
 *  一个简单的十六进制编辑器，用于显示和编辑扫描之后的结果
 *
 * A simple hex editor for showing and editing tag dumps generated by the
 * {@link ReadTagActivity}. Features are:
 * <ul>
 * <li>Color<ul>
 *  <li>keys (A/B)</li>
 *  <li>Access Conditions</li>
 *  <li>Value Blocks</li>
 *  <li>UID</li>
 *  <li>Manuf. Info</li>
 * </ul></li>
 * <li>Save dump to file</li>
 * <li>Display dump as US-ASCII</li>
 * <li>Display Access Conditions as table</li>
 * <li>Resolve Value Blocks to integers</li>
 * </ul>
 * @author Gerhard Klostermeier
 */
public class DumpEditorActivity extends BasicActivity
        implements IActivityThatReactsToSave {
    /**
     * The corresponding Intent will contain a dump separated by new lines.
     * Headers (e.g. "Sector: 1") are marked with a "+"-symbol
     * (e.g. "+Sector: 1"). Errors (e.g. "No keys found or dead sector")
     * are marked with a "*"-symbol.
     * 相应的意图将包含一个由新行分隔的转储。
     * 标题（如“扇区：1”）用“+”符号标记。
     *（例如“+部门：1”）。错误（例如“找不到键或死扇区”）
     * 标有“*”-符号。
     */
    public final static String EXTRA_DUMP =
            "de.syss.MifareClassicTool.Activity.DUMP";

    private static final String LOG_TAG =
            DumpEditorActivity.class.getSimpleName();

    private LinearLayout mLayout;
    private String mDumpName;
    private String mKeysName;
    private String mUID;

    private UpUtils upUtils;
    //控制类
    private MainPresenter mainPresenter;
    private CMEApplication app;
    private CourseEntity courseBean;
    private StudyRegistrationEntityDao studyDao;

    /**
     * All blocks containing valid data AND their headers (marked with "+"
     * e.g. "+Sector: 0") as strings.
     * This will be updated with every {@link #checkDumpAndUpdateLines()}
     * check.
     * 包含有效数据的所有块及其标题（用“+”标记）
     * 如“+扇区：0”）作为字符串。
     * 这将更新每个{@链接# checkdumpandupdatelines() }
     * 检查。
     */
    private String[] mLines;

    /**
     * True if the user made changes to the dump.
     * Used by the "save before quitting" dialog.
     */
    private boolean mDumpChanged;

    /**
     * If true, the editor will close after a successful save.
     * @see #onSaveSuccessful()
     */
    private boolean mCloseAfterSuccessfulSave;


    /**
     * Check whether to initialize the editor on a dump file or on
     * a new dump directly from {@link ReadTagActivity}
     * (or recreate instance state if the activity was killed).
     * Also it will color the caption of the dump editor.
     * @see #initEditor(String[])
     *
     *
     * 检查是否在转储文件或初始化文件上初始化编辑器。
     * 新的垃圾直接从{@链接readtagactivity }
     *（如果活动被杀死，则重新创建实例状态）。
     * 它还会着色转储编辑器的标题。
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        app = (CMEApplication) getApplication();
        mainPresenter = new MainPresenter();
        //上传工具类
        upUtils = UpUtils.getInstance(this,app);
        //打卡记录数据库类
        studyDao = app.getDaoSeeion().getStudyRegistrationEntityDao();

        Bundle bundle = getIntent().getExtras();
        if (null != bundle){
            courseBean = (CourseEntity) bundle.getSerializable("course");
            Log.d("logInfo", ""+courseBean);
        }

        mLayout= (LinearLayout) findViewById(
                R.id.linearLayoutDumpEditor);

        // Color caption.
        SpannableString keyA = CMEApplication.colorString(
                getString(R.string.text_keya),
                getResources().getColor(R.color.light_green));
        SpannableString keyB =  CMEApplication.colorString(
                getString(R.string.text_keyb),
                getResources().getColor(R.color.dark_green));
        SpannableString ac = CMEApplication.colorString(
                getString(R.string.text_ac),
                getResources().getColor(R.color.orange));
        SpannableString uidAndManuf = CMEApplication.colorString(
                getString(R.string.text_uid_and_manuf),
                getResources().getColor(R.color.purple));
        SpannableString vb = CMEApplication.colorString(
                getString(R.string.text_valueblock),
                getResources().getColor(R.color.yellow));

        TextView caption = (TextView) findViewById(
                R.id.textViewDumpEditorCaption);
        caption.setText(TextUtils.concat(uidAndManuf, " | ",
                vb, " | ", keyA, " | ", keyB, " | ", ac), BufferType.SPANNABLE);
        // Add web-link optic to update colors text view (= caption title).
        TextView captionTitle = (TextView) findViewById(
                R.id.textViewDumpEditorCaptionTitle);
        SpannableString updateText = CMEApplication.colorString(
                getString(R.string.text_update_colors),
                getResources().getColor(R.color.blue));
        updateText.setSpan(new UnderlineSpan(), 0, updateText.length(), 0);
        captionTitle.setText(TextUtils.concat(
                getString(R.string.text_caption_title),
                ": (", updateText, ")"));

        if (getIntent().hasExtra(EXTRA_DUMP)) {
            // Called from ReadTagActivity (init editor by intent).
            String[] dump = getIntent().getStringArrayExtra(EXTRA_DUMP);
            // Set title with UID.
            if (CMEApplication.getUID() != null) {
                mUID = CMEApplication.byte2HexString(CMEApplication.getUID());
                setTitle("NFC数据"+ " (UID: " + mUID+ ")");
            }
            initEditor(dump);
            setIntent(null);
        } else if (getIntent().hasExtra(
                FileChooserActivity.EXTRA_CHOSEN_FILE)) {
                // Called form FileChooserActivity (init editor by file).
                File file = new File(getIntent().getStringExtra(
                        FileChooserActivity.EXTRA_CHOSEN_FILE));
                mDumpName = file.getName();
                setTitle(getTitle() + " (" + mDumpName + ")");
                initEditor(CMEApplication.readFileLineByLine(file, false, this));
                setIntent(null);
        } else if (savedInstanceState != null) {

            // Recreated after kill by Android (due to low memory).
            mDumpName = savedInstanceState.getString("file_name");
            if (mDumpName != null) {
                setTitle(getTitle() + " (" + mDumpName + ")");
            }
            mLines = savedInstanceState.getStringArray("lines");
            if (mLines != null) {
                initEditor(mLines);
            }
        }
    }

    @Override
    public int getLayoutResId() {
        return R.layout.activity_nfc_dump_editor;
    }

    @Override
    public void onInitView() {

    }

    /**
     * Save {@link #mLines} and {@link #mDumpName}.
     */
    @Override
    public void onSaveInstanceState (Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putStringArray("lines", mLines);
        outState.putString("file_name", mDumpName);
    }

    /**
     * Update the coloring. This method updates the colors if all
     * data are valid {@link #checkDumpAndUpdateLines()}.
     * To do so, it re-initializes the whole editor... not quite beautiful.
     * @param view The View object that triggered the method
     * (in this case the update color text (color caption text)).
     * @see #checkDumpAndUpdateLines()
     * @see CMEApplication#isValidDumpErrorToast(int, Context)
     * @see #initEditor(String[])
     */
    public void onUpdateColors(View view) {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            CMEApplication.isValidDumpErrorToast(err, this);
            return;
        }

        //备份的集中视图
        // Backup focused view.
        View focused = mLayout.getFocusedChild();
        int focusIndex = -1;
        if (focused != null) {
            focusIndex = mLayout.indexOfChild(focused);
        }
        initEditor(mLines);
        if (focusIndex != -1) {
            // Restore focused view.
            while (focusIndex >= 0
                    && mLayout.getChildAt(focusIndex) == null) {
                focusIndex--;
            }
            if (focusIndex >= 0) {
                mLayout.getChildAt(focusIndex).requestFocus();
            }
        }
    }

    /**
     * Show a dialog in which the user can chose between "save", "don't save"
     * and "cancel", if there are unsaved changes.
     */
    @Override
    public void onBackPressed() {
        if (mDumpChanged) {
            new AlertDialog.Builder(this)
            .setTitle(R.string.dialog_save_before_quitting_title)
            .setMessage(R.string.dialog_save_before_quitting)
            .setIcon(android.R.drawable.ic_dialog_info)
            .setPositiveButton(R.string.action_save,
                    new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    // Save.
                    mCloseAfterSuccessfulSave = true;
                    saveDump();
                }
            })
            .setNeutralButton(R.string.action_cancel,
                    new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    // Cancel. Do nothing.
                }
            })
            .setNegativeButton(R.string.action_dont_save,
                     new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int id) {
                    // Don't save.
                    finish();
                }
            }).show();
        } else {
            super.onBackPressed();
        }
    }

    /**
     * Set the state of {@link #mDumpChanged} to false and close the
     * editor if {@link #mCloseAfterSuccessfulSave} is true (due to exiting
     * with unsaved changes) after a successful save process.
     */
    @Override
    public void onSaveSuccessful() {
        if (mCloseAfterSuccessfulSave) {
            finish();
        }
        mDumpChanged = false;
    }

    /**
     * Reset the state of {@link #mCloseAfterSuccessfulSave} to false if
     * there was an error (or if the user hit cancel) during the save process.
     */
    @Override
    public void onSaveFailure() {
        mCloseAfterSuccessfulSave = false;
    }

    /**
     * Check if it is a valid dump ({@link #checkDumpAndUpdateLines()}),
     * create a file name suggestion and call
     * {@link #saveFile(String[], String, boolean, int, int)}.
     * @see #checkDumpAndUpdateLines()
     * @see #saveFile(String[], String, boolean, int, int)
     */
    private void saveDump() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            CMEApplication.isValidDumpErrorToast(err, this);
            return;
        }

        // Set a filename (UID + Date + Time) if there is none.
        if (mDumpName == null) {
            GregorianCalendar calendar = new GregorianCalendar();
            SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss",
                    Locale.getDefault());
            fmt.setCalendar(calendar);
            String dateFormatted = fmt.format(calendar.getTime());
            mDumpName = "UID_" + mUID + "_" + dateFormatted;
        }

        saveFile(mLines, mDumpName, true, R.string.dialog_save_dump_title,
                R.string.dialog_save_dump);
    }

    /**
     * Check if the external storage is writable
     * {@link CMEApplication#isExternalStorageWritableErrorToast(Context)},
     * ask user for a save name and then call
     * {@link CMEApplication#checkFileExistenceAndSave(File, String[], boolean,
     * Context, IActivityThatReactsToSave)}.
     * This is a helper function for {@link #saveDump()}
     * and {@link # saveKeys()}.
     * @param data Data to save.
     * @param fileName Name of the file.
     * @param isDump True if data contains a dump. False if data contains keys.
     * @param titleId Resource ID for the title of the dialog.
     * @param messageId Resource ID for the message of the dialog.
     * @see CMEApplication#isExternalStorageWritableErrorToast(Context)
     * @see CMEApplication#checkFileExistenceAndSave(File, String[], boolean,
     * Context, IActivityThatReactsToSave)
     */
    private void saveFile(final String[] data, final String fileName,
                          final boolean isDump, int titleId, int messageId) {
        if (!CMEApplication.getPreferences().getBoolean(UseInternalStorage.toString(),
                false) && !CMEApplication.isExternalStorageWritableErrorToast(this)) {
            return;
        }
        String targetDir = (isDump) ? CMEApplication.DUMPS_DIR : CMEApplication.KEYS_DIR;
        final File path = CMEApplication.getFileFromStorage(
                CMEApplication.HOME_DIR +  "/" + targetDir);
        final Context context = this;
        final IActivityThatReactsToSave activity = this;

        // Ask user for filename.
        final EditText input = new EditText(this);
        input.setInputType(InputType.TYPE_CLASS_TEXT);
        input.setLines(1);
        input.setHorizontallyScrolling(true);
        input.setText(fileName);
        input.setSelection(input.getText().length());
        new AlertDialog.Builder(this)
            .setTitle(titleId)
            .setMessage(messageId)
            .setIcon(android.R.drawable.ic_menu_save)
            .setView(input)
            .setPositiveButton(R.string.action_save,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int whichButton) {
                            if (input.getText() != null
                                    && !input.getText().toString().equals("")) {
                                File file = new File(path.getPath(),
                                        input.getText().toString());
                                CMEApplication.checkFileExistenceAndSave(file, data,
                                        isDump, context, activity);
                                if (isDump) {
                                    mDumpName = file.getName();
                                } else {
                                    mKeysName = file.getName();
                                }
                            } else {
                                // Empty name is not allowed.
                                Toast.makeText(context, R.string.info_empty_file_name,
                                        Toast.LENGTH_LONG).show();
                            }
                        }
                    })
            .setNegativeButton(R.string.action_cancel,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int whichButton) {
                            mCloseAfterSuccessfulSave = false;
                        }
                    }).show();
        onUpdateColors(null);
    }

    /**
     * Check if all sectors contain valid data. If all blocks are O.K.
     * {@link #mLines} will be updated.
     * @return <ul>
     * <li>0 - All blocks are O.K.</li>
     * <li>1 - At least one sector has not 4 or 16 blocks (lines).</li>
     * <li>2 - At least one block has invalid characters (not hex or "-" as
     * marker for no key/no data).</li>
     * <li>3 - At least one block has not 16 byte (32 chars).</li>
     * </ul>
     * @see #mLines
     *
     *
     * 检查所有扇区是否包含有效数据。如果所有区块都正常
     * {@链接# mlines }将更新。
     * 返回< > >
     * < < 0 > -所有的区块都可以。
     * < < 1 > -至少一个扇区没有4个或16个块（行）。
     * <李> 2 -至少有一个块有无效字符（不是十六进制或“-”）
     * 无键/无数据的标记。
     * <李> 3 -至少有一个块没有16个字节（32个字符）。
     * “看# mlines
     */
    private int checkDumpAndUpdateLines() {
        ArrayList<String> checkedLines = new ArrayList<String>();
        for(int i = 0; i < mLayout.getChildCount(); i++) {
            View child = mLayout.getChildAt(i);
            if (child instanceof EditText) {
                String[] lines = ((EditText)child).getText().toString()
                        .split(System.getProperty("line.separator"));
                if (lines.length != 4 && lines.length != 16) {
                    // Not 4 or 16 lines.
                    return 1;
                }
                for (int j = 0; j < lines.length; j++) {
                    // Is hex or "-" == NO_KEY or NO_DATA.
                    if (!lines[j].matches("[0-9A-Fa-f-]+")) {
                        // Not pure hex.
                        return 2;
                    }
                    if (lines[j].length() != 32) {
                        // Not 32 chars per line.
                        return 3;
                    }
                    lines[j] = lines[j].toUpperCase(Locale.getDefault());
                    checkedLines.add(lines[j]);
                }
            } else if (child instanceof TextView) {
                TextView tv = (TextView) child;
                String tag = (String) tv.getTag();
                // Only save real headers (not the headers
                // of sectors with "no keys found or dead sector" error).
                if (tag != null && tag.equals("real_header")) {
                    // Mark headers (sectors) with "+"
                    checkedLines.add("+Sector: "
                            + tv.getText().toString().split(": ")[1]);
                }
            }
        }
        // Update mLines.
        mLines = checkedLines.toArray(new String[checkedLines.size()]);
        return 0;
    }

    /**
     * 初始化编辑器
     *
     * Initialize the editor with the given lines. If the lines do not contain
     * a valid dump, an error Toast will be shown and the Activity exits.
     * @param lines Block data and header (e.g. "sector: 0"). Minimum is one
     * Sector (5 Lines, 1 Header + 4 Hex block data).
     * @see CMEApplication#isValidDump(String[], boolean)
     * @see CMEApplication#isValidDumpErrorToast(int, Context)
     */
    private void initEditor(String[] lines) {

        List<String> newStrings = null;

        int err = CMEApplication.isValidDump(lines, true);
        if (err != 0) {
            CMEApplication.isValidDumpErrorToast(err, this);
            Toast.makeText(this, R.string.info_editor_init_error,
                    Toast.LENGTH_LONG).show();
            finish();
            return;
        }

        // Parse dump and show it.
        boolean tmpDumpChanged = mDumpChanged;
        mLayout.removeAllViews();
        boolean isFirstBlock = false;
        EditText et = null;
        ArrayList<SpannableString> blocks =
                new ArrayList<SpannableString>(4);
        for (int i = 0; i < lines.length; i++) {
            if (lines[i].startsWith("+")) {
                // Line is a header.
                isFirstBlock = lines[i].endsWith(" 0");
                String sectorNumber = lines[i].split(": ")[1];
                // Add sector header (TextView).
                TextView tv = new TextView(this);
                tv.setTextColor(
                        getResources().getColor(R.color.blue));
                tv.setText(getString(R.string.text_sector) +
                        ": " + sectorNumber);
                mLayout.addView(tv);
                // Add sector data (EditText) if not at the end and if the
                // next line is not an error line ("*").
                if (i+1 != lines.length && !lines[i+1].startsWith("*")) {
                    // Add sector data (EditText).
                    et = new EditText(this);
                    et.setLayoutParams(new LayoutParams(
                            LayoutParams.WRAP_CONTENT,
                            LayoutParams.WRAP_CONTENT));
                    et.setInputType(et.getInputType()
                            | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS
                            | InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
                    et.setTypeface(Typeface.MONOSPACE);
                    // Set text size of an EditText to the text size of
                    // a TextView. (getTextSize() returns
                    // pixels - unit is needed.)
                    et.setTextSize(TypedValue.COMPLEX_UNIT_PX,
                            new TextView(this).getTextSize());
                    // Add a listener for changes to the text.
                    et.addTextChangedListener(new TextWatcher(){
                        @Override
                        public void afterTextChanged(Editable s) {
                            // Text was changed.
                            mDumpChanged = true;
                        }
                        @Override
                        public void beforeTextChanged(CharSequence s,
                                int start, int count, int after) {}
                        @Override
                        public void onTextChanged(CharSequence s,
                                int start, int before, int count) {}
                    });
                    mLayout.addView(et);
                    // Tag headers of real sectors (sectors containing
                    // data (EditText) and not errors ("*")).
                    tv.setTag("real_header");
                }
            } else if (lines[i].startsWith("*")){
                // Error Line: Line is a sector that could not be read.
                TextView tv = new TextView(this);
                tv.setTextColor(
                        getResources().getColor(R.color.red));
                tv.setText("   " +  getString(
                        R.string.text_no_key_io_error));
                tv.setTag("error");
                mLayout.addView(tv);
            } else {
                // Line is a block.
                if (i+1 == lines.length || lines[i+1].startsWith("+")) {
                    // Line is a sector trailer.
                    blocks.add(colorSectorTrailer(lines[i]));
                    // Add sector data to the EditText.
                    CharSequence text = "";
                    int j;
                    for (j = 0; j < blocks.size()-1; j++) {
                        text = TextUtils.concat(
                                text, blocks.get(j), "\n");
                    }
                    text = TextUtils.concat(text, blocks.get(j));
                    et.setText(text, BufferType.SPANNABLE);
                    blocks = new ArrayList<SpannableString>(4);
                } else {
                    // Add data block.
                    blocks.add(colorDataBlock(lines[i], isFirstBlock));
                    isFirstBlock = false;
                }
            }

            if (lines[i].trim().length() == 32){
                //String[]转List
                List<String> strings = Arrays.asList(lines);
                newStrings = new ArrayList<>();
                for (int j = 0; j<strings.size(); j++){
                    String str = strings.get(j);
                    if (str.length() == 32){
                        str = str.substring(20,32);
                        newStrings.add(str);
                    }
                }
            }
        }

        /**
         * 验证医通卡号
         */
        List<String> userNumber = getUserNumber();
        Collection exists=new ArrayList<String>(userNumber);
        Collection notexists=new ArrayList<String>(userNumber);
        exists.removeAll(newStrings);
        notexists.removeAll(exists);
        if (notexists.size() == 0 && notexists != null){
            showMessage("当前医通卡没有写磁，请先写入医通卡号！");
            this.finish();
            return;
        } else {
            //医通卡号：String数组转String
            String empNumber = "";
            Collection collection = notexists;
            List list = (ArrayList) collection;
            for (int i = 0; i < list.size(); i++) {
                empNumber += list.get(i);
            }
            if (empNumber.length() >12){
                empNumber = empNumber.substring(0,12);
                showMessage("当前医通卡号："+empNumber);
                if (null !=courseBean){
                    upData(empNumber);
                }
            }
        }

        // Initialization of the editor is not a change.
        mDumpChanged = tmpDumpChanged;

    }


    /**
     * Create a full colored string (representing one block).
     * @param data Block data as hex string (16 Byte, 32 Chars.).
     * @param hasUID True if the block is the first block of the entire tag
     * (Sector 0, Block 0).
     * @return A full colored string.
     */
    private SpannableString colorDataBlock(String data, boolean hasUID) {
        SpannableString ret;
        if (hasUID) {
            // First block (UID, manuf. data).
            ret = new SpannableString(TextUtils.concat(
                    CMEApplication.colorString(data,
                            getResources().getColor(R.color.purple))));
        } else {
            if (CMEApplication.isValueBlock(data)) {
                // Value block.
                ret = CMEApplication.colorString(data,
                        getResources().getColor(R.color.yellow));
            } else {
                // Just data.
                ret = new SpannableString(data);
            }
        }
        return ret;
    }

    /**
     * Create a full colored sector trailer (representing the last block of
     * every sector).
     * @param data Block data as hex string (16 Byte, 32 Chars.).
     * @return A full colored string.
     */
    private SpannableString colorSectorTrailer(String data) {
        // Get sector trailer colors.
        int colorKeyA = getResources().getColor(
                R.color.light_green);
        int colorKeyB = getResources().getColor(
                R.color.dark_green);
        int colorAC = getResources().getColor(
                R.color.orange);
        try {
            SpannableString keyA = CMEApplication.colorString(
                    data.substring(0, 12), colorKeyA);
            SpannableString keyB = CMEApplication.colorString(
                    data.substring(20), colorKeyB);
            SpannableString ac = CMEApplication.colorString(
                    data.substring(12, 20), colorAC);
            return new SpannableString(
                    TextUtils.concat(keyA, ac, keyB));
        } catch (IndexOutOfBoundsException e) {
            Log.d(LOG_TAG, "Error while coloring " +
                    "sector trailer");
        }
        return new SpannableString(data);
    }


    /**
     * 设值并上传打卡记录
     * @param empNumber
     */
    public void upData(String empNumber){

        StudyRegistrationEntity entity = new StudyRegistrationEntity();
        entity.setXh(DateUtils.UUID());
        entity.setCourseId(this.courseBean.getCourseId());
        entity.setEmpNumber(empNumber);
        entity.setDeptId(this.courseBean.getDeptId());
        entity.setDeptName(this.courseBean.getDeptName());
        entity.setCourseName(this.courseBean.getCourseName());

        String placeName = app.getCurrentLocation().getPlaceName();
        String position = app.getCurrentLocation().getPosition();
        entity.setPlaceName(placeName);
        entity.setPosition(position);

        entity.setDakaTime(DateUtils.currentTime());
        entity.setAddYear(DateUtils.currentYear());
        entity.setIsvalid("1");
        entity.setIsgrant("0");
        entity.setAwardstate("0");
        entity.setState("0");
        entity.setAddTime(DateUtils.currentTime());
        entity.setRemarks1("无");
        entity.setRemarks2("无");
        entity.setRemarks3("无");
        entity.setGxsj(DateUtils.currentTime());
        entity.setMark("0");

        //将数据存入数据库
        studyDao.insertOrReplace(entity);
//        DBUtils instance = DBUtils.getInstance(this, app);
//        List<StudyRegistrationEntity> employeeEntities = instance.loadStudyRegistration(app.getDaoSeeion().getStudyRegistrationEntityDao());
        //上传打卡记录
//        upUtils.upCardRecord(entity,mainPresenter);
    }


    /**
     * 获得数据库中所有人员的医通卡号
     */
    public List<String> getUserNumber(){
        List<String> list = new ArrayList<>();
        DBUtils instance = DBUtils.getInstance(this, app);
        List<EmployeeEntity> employeeEntities = instance.loadAllEmployee(app.getDaoSeeion().getEmployeeEntityDao());
        if (null != employeeEntities && employeeEntities.size() > 0) {
            for (int i = 0; i < employeeEntities.size(); i++) {
                String usernumber = employeeEntities.get(i).getUsernumber();
                list.add(usernumber);
            }
        }
        return list;
    }

}
